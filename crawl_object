from urllib.request import urlopen
from crawler_demo import mkdir, touch_files, data_to_set, set_to_file
from urls_finder import UrlsFinder
from domain_extract import get_domain_nm


class Crawler:

    """Global vars to share between several threads of Crawler"""
    project_name = ''
    start_url = ''
    domain = ''
    files_to_crawl = ''
    crawled_files = ''
    to_do = set()
    crawled = set()

    """Initializing variables"""
    def __init__(self, project_name, start_url, domain):
        Crawler.project_name = project_name
        Crawler.start_url = start_url
        Crawler.domain = domain
        Crawler.files_to_crawl = Crawler.project_name + '/files_to_crawl.txt'
        Crawler.crawled_files = Crawler.project_name + '/crawled.txt'
        self.boot()
        self.crawl('First', Crawler.start_url)

    @staticmethod
    def boot():
        mkdir(Crawler.project_name)
        touch_files(Crawler.project_name, Crawler.start_url)
        Crawler.to_do = data_to_set(Crawler.files_to_crawl)
        Crawler.crawled = data_to_set(Crawler.crawled_files)

    @staticmethod
    def crawl_one(thread_name, page_url):
        if page_url not in Crawler.crawled:
            print(thread_name + ' crawling ' + page_url)
            print('Queue' + str(len(Crawler.to_do)) + '  crawled' + str(len(Crawler.crawled)))
            Crawler.add_urls(Crawler.gather_urls(page_url))
            Crawler.to_do.remove(page_url)
            Crawler.crawled.add(page_url)
            Crawler.update()

    @staticmethod
    def gather_urls(page_url):
        finder = ''
        html_str = ''
        try:
            response = urlopen(page_url)
            """Checking the type of the url to avoid pdf / download links and etc"""
            if 'text/html' in response.getheader('Content-Type'):
                html_bytes = response.read()
                html_str = html_bytes.decode("utf-8")
                finder = UrlsFinder(Crawler.start_url, page_url)
                finder.feed(html_str)
        except Exception as e:
            print(str(e))
            return set()
        return finder.all_urls()

    @staticmethod
    def add_urls(urls):
        for url in urls:
            if(url in Crawler.to_do) or (url in Crawler.crawled):
                continue
            if Crawler.domain != get_domain_nm(url):
                continue
            Crawler.to_do.add(url)

    @staticmethod
    def update():
        set_to_file(Crawler.to_do, Crawler.files_to_crawl)
        set_to_file(Crawler.crawled, Crawler.crawled_files)